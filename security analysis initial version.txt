Security analysis for grade manager project. Group 19.

Over the last two weeks of the project we have been looking at the security of the web application.
Security issues which are considered are the following: Cross side scripting, sql injection, encryption of passwords of users.
Outside of our scope are issues which are related to the communication between the user and the server, such as whether we encrypt information which is sent from the client to the server (like a password).

Not all security issues are relevant in every page a user can access, the login page, the student page and the manager page. This is because some pages do not allow for user input, which is usually a vulnerability for the security issues we consider.

With the login page, it is important to sanitize the user input or use a prepared (parameterized) query, because we make use of an SQL query to compare the submitted login information with our person database, where it would be possible inject SQL in order to login with incorrect credentials. 

With the student page, we don't accept user input at all, at the moment of writing.
For teachers, while we could assume that they are less likely to have malicious intentions, we still have to take into account the possibility that a teacher might want to mess things up. 
Therefore, with all queries to, for example, alter a grade or add a subject, we intentionally make use of prepared statements. 

For the manager page (while we really feel like managers should be really reliable to be put in this responsible position), we still make use of prepared statements with sanitized user input.

As for session management, we make use of the standard implementation of request.getSession(), to create a session as well as getting the session id, by calling session.getId(). We trust that the session id's generated by this method meet the required conditions for a good session id, namely that it is meaningless as well as unpredictable. We query the database for this session id to get the logged in user id, if it exists.

We expect the sanitizing of the user input, aswell as using prepared statements will provide adequate protection against cross side scripting as well as sql injection, and for the password encryption, we make use of a hashing algorithm to hash the password, with a secret string "testi" appended to it to attempt to make the encrypted password unpredictable, as well as meaningless.

To elaborate on the choice of the hashing algorithm, we consider the following: 
-Using MD5 is a bad idea, not necessarily because of its cryptographic weakness but rather because it is really fast, so that it is quite easy to try a lot of passwords in a short period of time, even on a slow computer.
-We don't really have time to make the passwords super-secure. 
Given these two considerations, we decided to use medium security, which resulted in us choosing to use the SHA-1 algorithm.

The SHA-1 algorithm is not really safe enough, as many important companies such as Microsoft, Google as well as Mozilla, announced that they consider it to be not that secure, and would like to use a more secure algorithm. That is unfortunate, but we consider that outside of our scope thusfar. 

Unfortunately we have to keep some things out of our scope. This is because we don't have enough time to think about security, or do research about security, let aside implement it. But we consider our system moderately protected, to our knowledge.
